name: Preview Deployment

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: "18"

jobs:
  # Build preview
  build-preview:
    name: Build Preview
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test:ci
        env:
          CI: true

      - name: Build preview
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: https://storysign-backend.onrender.com
          REACT_APP_WS_URL: wss://storysign-backend.onrender.com
          REACT_APP_USE_PROXY: true
          REACT_APP_ENVIRONMENT: staging
          GENERATE_SOURCEMAP: true
          CI: true

      - name: Upload preview build
        uses: actions/upload-artifact@v4
        with:
          name: preview-build-${{ github.event.number }}
          path: frontend/build/
          retention-days: 7

  # Deploy preview to Netlify
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build-preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download preview build
        uses: actions/download-artifact@v4
        with:
          name: preview-build-${{ github.event.number }}
          path: frontend/build/

      - name: Deploy preview to Netlify
        id: deploy-preview
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: "./frontend/build"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Preview for PR #${{ github.event.number }} - ${{ github.event.pull_request.title }}"
          alias: pr-${{ github.event.number }}
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview Deployment')
            );

            const previewUrl = '${{ steps.deploy-preview.outputs.preview-url }}';
            const deployUrl = '${{ steps.deploy-preview.outputs.deploy-url }}';

            const body = `## 🚀 Preview Deployment

            **Preview URL:** ${previewUrl}
            **Deploy URL:** ${deployUrl}

            ### 📋 Preview Information
            - **PR:** #${{ github.event.number }}
            - **Commit:** ${{ github.event.pull_request.head.sha }}
            - **Branch:** ${{ github.event.pull_request.head.ref }}

            ### 🧪 Testing Checklist
            - [ ] Authentication flow works
            - [ ] ASL World module loads correctly
            - [ ] Harmony module functions properly
            - [ ] Reconnect module is accessible
            - [ ] Video streaming works (if backend is available)
            - [ ] Responsive design on mobile devices
            - [ ] Accessibility features work correctly

            ### 🔗 Useful Links
            - [Backend Health Check](https://storysign-backend.onrender.com/health)
            - [API Documentation](https://storysign-backend.onrender.com/docs)

            ---
            *This preview will be updated automatically when you push new commits to this PR.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Run accessibility tests on preview
  accessibility-preview:
    name: Accessibility Test Preview
    runs-on: ubuntu-latest
    needs: deploy-preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli

      - name: Wait for preview deployment
        run: sleep 30

      - name: Run accessibility tests
        id: axe-test
        run: |
          PREVIEW_URL="https://pr-${{ github.event.number }}--storysign-platform.netlify.app"

          # Run axe tests and capture output
          axe $PREVIEW_URL --exit > axe-results.txt 2>&1 || true

          # Check if there are violations
          if grep -q "violations found" axe-results.txt; then
            echo "accessibility_violations=true" >> $GITHUB_OUTPUT
            echo "❌ Accessibility violations found"
          else
            echo "accessibility_violations=false" >> $GITHUB_OUTPUT
            echo "✅ No accessibility violations found"
          fi
        continue-on-error: true

      - name: Comment accessibility results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let axeResults = '';

            try {
              axeResults = fs.readFileSync('axe-results.txt', 'utf8');
            } catch (error) {
              axeResults = 'Could not read accessibility test results.';
            }

            const hasViolations = '${{ steps.axe-test.outputs.accessibility_violations }}' === 'true';
            const status = hasViolations ? '❌ Accessibility Issues Found' : '✅ Accessibility Tests Passed';

            const body = `## ${status}

            ### Accessibility Test Results for PR #${{ github.event.number }}

            \`\`\`
            ${axeResults}
            \`\`\`

            ${hasViolations ? 
              '⚠️ **Please fix the accessibility issues before merging this PR.**' : 
              '🎉 **Great job! No accessibility violations detected.**'
            }

            ---
            *Accessibility tests run automatically on all preview deployments.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Performance testing on preview
  performance-preview:
    name: Performance Test Preview
    runs-on: ubuntu-latest
    needs: deploy-preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Wait for preview deployment
        run: sleep 30

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          PREVIEW_URL="https://pr-${{ github.event.number }}--storysign-platform.netlify.app"

          # Create Lighthouse CI config
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "url": ["$PREVIEW_URL"],
                "numberOfRuns": 3
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.7}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.8}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

          # Run Lighthouse CI
          lhci autorun --config=lighthouserc.json > lighthouse-results.txt 2>&1 || true

          # Extract report URL if available
          if grep -q "Open the report at" lighthouse-results.txt; then
            REPORT_URL=$(grep "Open the report at" lighthouse-results.txt | sed 's/.*Open the report at //')
            echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Comment performance results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let lighthouseResults = '';

            try {
              lighthouseResults = fs.readFileSync('lighthouse-results.txt', 'utf8');
            } catch (error) {
              lighthouseResults = 'Could not read Lighthouse test results.';
            }

            const reportUrl = '${{ steps.lighthouse.outputs.report_url }}';

            const body = `## 📊 Performance Test Results for PR #${{ github.event.number }}

            ### Lighthouse Report
            ${reportUrl ? `[📈 View Full Report](${reportUrl})` : 'Report URL not available'}

            ### Test Output
            \`\`\`
            ${lighthouseResults.slice(0, 2000)}${lighthouseResults.length > 2000 ? '\n... (truncated)' : ''}
            \`\`\`

            ---
            *Performance tests run automatically on all preview deployments.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  # Clean up old preview deployments
  cleanup-old-previews:
    name: Cleanup Old Previews
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'

    steps:
      - name: Delete preview artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // This would clean up old artifacts and deployments
            // Implementation depends on your specific needs
            console.log('Cleaning up preview for closed PR #${{ github.event.number }}');
        continue-on-error: true
