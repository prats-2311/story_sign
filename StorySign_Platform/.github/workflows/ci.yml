name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:ci

      - name: Run tests with coverage
        run: npm run test:ci
        env:
          CI: true

      - name: Build frontend
        run: npm run build:production
        env:
          REACT_APP_API_URL: https://storysign-backend.onrender.com
          REACT_APP_WS_URL: wss://storysign-backend.onrender.com
          REACT_APP_USE_PROXY: true
          REACT_APP_ENVIRONMENT: production
          GENERATE_SOURCEMAP: false
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

  # Backend CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      # Add MySQL service for testing if needed
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: storysign_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov flake8 black isort

      - name: Run code formatting check (Black)
        run: black --check --diff .

      - name: Run import sorting check (isort)
        run: isort --check-only --diff .

      - name: Run linting (Flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run type checking (if mypy is available)
        run: |
          if pip list | grep -q mypy; then
            mypy . --ignore-missing-imports || true
          fi
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
        env:
          # Test environment variables
          ENVIRONMENT: test
          DATABASE_HOST: localhost
          DATABASE_PORT: 3306
          DATABASE_NAME: storysign_test
          DATABASE_USER: root
          DATABASE_PASSWORD: test_password
          JWT_SECRET: test-jwt-secret-for-ci
          GROQ_API_KEY: test-groq-key

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/htmlcov/
          retention-days: 7

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

      - name: Run npm audit (frontend)
        run: |
          cd frontend
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run pip safety check (backend)
        run: |
          cd backend
          pip install safety
          safety check
        continue-on-error: true

  # Build validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment configurations
        run: |
          # Check if required deployment files exist
          test -f render.yaml || (echo "render.yaml not found" && exit 1)
          test -f netlify.toml || (echo "netlify.toml not found" && exit 1)
          test -f frontend/public/_redirects || (echo "_redirects not found" && exit 1)

          # Validate YAML syntax
          python -c "import yaml; yaml.safe_load(open('render.yaml'))" || (echo "Invalid render.yaml" && exit 1)

          echo "✅ All deployment configurations are valid"

      - name: Check environment variables documentation
        run: |
          test -f frontend/.env.example || (echo "frontend/.env.example not found" && exit 1)
          test -f frontend/.env.production || (echo "frontend/.env.production not found" && exit 1)
          echo "✅ Environment variable documentation exists"

      - name: Validate package.json scripts
        run: |
          cd frontend
          # Check if required scripts exist
          npm run --silent | grep -q "build:production" || (echo "build:production script missing" && exit 1)
          npm run --silent | grep -q "test:ci" || (echo "test:ci script missing" && exit 1)
          npm run --silent | grep -q "lint:ci" || (echo "lint:ci script missing" && exit 1)
          echo "✅ All required npm scripts are present"

  # Accessibility testing
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [frontend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install accessibility testing tools
        run: |
          npm install -g @axe-core/cli serve

      - name: Start local server
        run: |
          cd frontend
          serve -s build -l 3000 &
          sleep 10

      - name: Run axe accessibility tests
        run: |
          axe http://localhost:3000 --exit
        continue-on-error: true

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [frontend-ci]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          cd frontend
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true
